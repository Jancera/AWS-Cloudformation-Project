Parameters:
  LoadBalancerName:
    Type: String
    Default: 'LoadBalancerFinalProject'
  LoadBalancerTargetGroupName:
    Type: String
    Default: 'TargetGroupFinalProject'
  Subnets:
    Type: 'List<AWS::EC2::Subnet::Id>'
  VpcId: 
    Type: AWS::EC2::VPC::Id
  CidrIp:
    Type: String
    Default: 0.0.0.0
  LaunchTemplateName:
    Type: String
    Default: 'LaunchTemplateFinalProject'
  LaunchTemplateImageId:
    Type: AWS::EC2::Image::Id
  
Resources:
  #LoadBalancer
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Ref LoadBalancerName
      SecurityGroups: 
        - !Ref SecurityGroupLoadBalancer
      Subnets: !Ref Subnets

  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn:
      - LoadBalancerTargetGroup
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Protocol: HTTP
      Port: 80
      DefaultActions:
        - Type: forward 
          ForwardConfig:
            TargetGroups:
              - TargetGroupArn: !Ref LoadBalancerTargetGroup
                Weight: 1

  LoadBalancerTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Ref LoadBalancerTargetGroupName
      Port: 80
      Protocol: HTTP
      VpcId: !Ref VpcId 
      TargetType: instance
      HealthCheckPath: /status
      HealthCheckPort: 80
      HealthCheckProtocol: HTTP
      HealthyThresholdCount: 3
      HealthCheckIntervalSeconds: 6

  #SecurityGroup
  SecurityGroupLoadBalancer:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupName: MySGLoadBalancer
        GroupDescription: MySGLoadBalancer
        VpcId: !Ref VpcId
        SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: 0.0.0.0/0

  SecurityGroupInstance:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: MySGInstance
      VpcId: !Ref VpcId
      GroupName: MySGInstance
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref CidrIp
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref SecurityGroupLoadBalancer
  
  #Autoscaling
  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    DependsOn: 
      - InstanceProfile
    Properties: 
      LaunchTemplateName: !Ref LaunchTemplateName
      TagSpecifications:
        - ResourceType: launch-template
          Tags:
            - Key: Name
              Value: AutoScalingInstance
      LaunchTemplateData:
        ImageId: !Ref LaunchTemplateImageId
        InstanceType: t2.micro
        KeyName: ada
        SecurityGroupIds:
          - !Ref SecurityGroupInstance
        IamInstanceProfile:
          Arn: !GetAtt
            - InstanceProfile
            - Arn
        
  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn:
      - LaunchTemplate
      - LoadBalancerTargetGroup
    Properties:
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber
      MaxSize: '3'
      MinSize: '1'
      DesiredCapacity: '2'
      TargetGroupARNs:
        - !Ref LoadBalancerTargetGroup
      VPCZoneIdentifier: !Ref Subnets


  #IAM
  InstanceProfile : 
    Type : "AWS::IAM::InstanceProfile"
    Properties : 
      Path : "/"
      Roles : 
        - !Ref IAMRole

  IAMRole: 
    Type: "AWS::IAM::Role"
    Properties: 
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - Effect: "Allow"
            Principal: 
              Service: 
                - "ec2.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      Path: "/"

  IAMPolicy: 
    Type: "AWS::IAM::Policy"
    Properties: 
      PolicyName: "root"
      PolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - Effect: "Allow"
            Action: 
              - s3:GetObject
              - s3:ListBucket
            Resource: 
              - arn:aws:s3:::exercicio-ada/*
              - arn:aws:s3:::exercicio-ada
      Roles: 
        - !Ref "IAMRole"