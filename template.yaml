Parameters:
  LoadBalancerName:
    Type: String
  LoadBalancerTargetGroupName:
    Type: String
  Subnets:
    Type: 'List<AWS::EC2::Subnet::Id>'
  VpcId: 
    Type: AWS::EC2::VPC::Id
#  InstanceTargets:
#    Type: AWS::EC2::Instance::Id
  CidrIp:
    Type: String
    Default: 0.0.0.0
  LaunchTemplateName:
    Type: String
  LaunchTemplateImageId:
    Type: AWS::EC2::Image::Id
  

Resources:
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    DependsOn:
      - SecurityGroupLoadBalancer
    Properties:
      Name: !Ref LoadBalancerName
      SecurityGroups: 
        - !Ref SecurityGroupLoadBalancer
      Subnets: !Ref Subnets

  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn:
      - LoadBalancerTargetGroup
      - LoadBalancer
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Protocol: HTTP
      Port: 80
      DefaultActions:
        - Type: forward 
          ForwardConfig:
            TargetGroups:
              - TargetGroupArn: !Ref LoadBalancerTargetGroup
                Weight: 1

  LoadBalancerTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Ref LoadBalancerTargetGroupName
      Port: 80
      Protocol: HTTP
      HealthCheckPort: 80 
      VpcId: !Ref VpcId 

  SecurityGroupLoadBalancer:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: MySGLoadBalancer
        VpcId: !Ref VpcId
        GroupName: MySGLoadBalancer
        SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: 0.0.0.0/0

  SecurityGroupInstance:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: MySGInstance
      VpcId: !Ref VpcId
      GroupName: MySGInstance
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref CidrIp
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref SecurityGroupLoadBalancer

  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties: 
      LaunchTemplateName: !Ref LaunchTemplateName
      LaunchTemplateData:
        ImageId: !Ref LaunchTemplateImageId
        InstanceType: t2.micro
        KeyName: ada
        SecurityGroupIds:
          - !Ref SecurityGroupInstance
        
  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn:
      - LaunchTemplate
      - LoadBalancer
      - LoadBalancerListener
    Properties:
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber
      MaxSize: '3'
      MinSize: '1'
      DesiredCapacity: '2'
      TargetGroupARNs:
        - !Ref LoadBalancerTargetGroup
      VPCZoneIdentifier: !Ref Subnets
      LoadBalancerNames:
        - !Ref LoadBalancer